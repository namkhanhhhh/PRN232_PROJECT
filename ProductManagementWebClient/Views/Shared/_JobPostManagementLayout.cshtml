@inject IHttpContextAccessor HttpContextAccessor

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - SJOB Platform</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" />
    <link rel="stylesheet" href="~/css/employer.css" />
    <link rel="stylesheet" href="~/css/customer-services.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
</head>

<style>
    .job-card .row.mt-3.g-2 img {
        max-width: 150px;
        max-height: 150px;
        padding-bottom: 30px;
    }

        .job-card .row.mt-3.g-2 img:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

    .top-bar {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        padding: 15px 20px;
        background: #fff;
        border-bottom: 1px solid #e9ecef;
        gap: 15px;
    }

    .balance-display {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .balance-amount {
        background: #28a745;
        color: white;
        padding: 8px 16px;
        border-radius: 6px;
        font-weight: 600;
        font-size: 14px;
        min-width: 120px;
        text-align: center;
        transition: all 0.3s ease;
    }

    .balance-amount.updating {
        background: #ffc107;
        animation: pulse 1s infinite;
    }

    .btn-deposit {
        background: #dc3545;
        color: white;
        padding: 8px 16px;
        border-radius: 6px;
        text-decoration: none;
        font-weight: 500;
        font-size: 14px;
        display: flex;
        align-items: center;
        gap: 5px;
        transition: background-color 0.2s;
    }

        .btn-deposit:hover {
            background: #c82333;
            color: white;
            text-decoration: none;
        }

    .user-dropdown .btn {
        background: transparent;
        border: 1px solid #dee2e6;
        color: #495057;
        padding: 8px 12px;
        border-radius: 6px;
        font-size: 14px;
    }

        .user-dropdown .btn:hover {
            background: #f8f9fa;
            border-color: #adb5bd;
        }

    /* Enhanced submenu styles */
    .sidebar-nav .nav-item {
        position: relative;
    }

    .sidebar-nav .sub-menu {
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.3s ease;
        background: rgba(0, 0, 0, 0.1);
        margin-left: 0;
        padding-left: 0;
    }

    .sidebar-nav .nav-item.expanded .sub-menu {
        max-height: 200px;
    }

    .sidebar-nav .sub-menu .nav-item {
        padding-left: 20px;
    }

    .sidebar-nav .sub-menu .nav-link {
        padding: 8px 15px;
        font-size: 14px;
        color: rgba(255, 255, 255, 0.8);
    }

        .sidebar-nav .sub-menu .nav-link:hover {
            background: rgba(255, 255, 255, 0.1);
            color: white;
        }

    .sidebar-nav .sub-menu .nav-item.active .nav-link {
        background: rgba(255, 255, 255, 0.2);
        color: white;
        font-weight: 600;
        
    }

    /* Parent menu item with submenu indicator */
    .sidebar-nav .nav-item:has(.sub-menu) > .nav-link::after {
        content: '\f107';
        font-family: 'Font Awesome 6 Free';
        font-weight: 900;
        float: right;
        transition: transform 0.3s ease;
        padding-left: 60px;
    }


    /* Customer Service specific styles */
    .customer-service-menu {
        margin: 5px 0;
    }

        .customer-service-menu .nav-link {
            color: white !important;
            font-weight: 500;
        }
</style>

<body>
    <div class="employer-dashboard">
        <aside class="sidebar">
            <div class="sidebar-header">
                <a href="/JobPostManagement" class="logo">
                    <img src="/assets/img/noBackground.png" alt="SJOB Logo" />
                </a>
            </div>

            <nav class="sidebar-nav">
                <ul>
                    <li class="nav-item @(ViewContext.RouteData.Values["controller"].ToString() == "JobPostManagement" && ViewContext.RouteData.Values["action"].ToString() == "Index" ? "active" : "")">
                        <a href="/JobPostManagement" class="nav-link">
                            <i class="fas fa-clipboard-list"></i>
                            <span>Quản lý bài đăng</span>
                        </a>
                    </li>
                    <li class="nav-item @(ViewContext.RouteData.Values["controller"].ToString() == "JobPostManagement" && ViewContext.RouteData.Values["action"].ToString() == "Create" ? "active" : "")">
                        <a href="/JobPostManagement/Create" class="nav-link">
                            <i class="fas fa-plus-circle"></i>
                            <span>Tạo bài đăng mới</span>
                        </a>
                    </li>
                    <li class="nav-item @(ViewContext.RouteData.Values["controller"].ToString() == "ApplicationManagement" ? "active" : "")">
                        <a href="/ApplicationManagement" class="nav-link">
                            <i class="fas fa-users"></i>
                            <span>Quản lý ứng viên</span>
                        </a>
                    </li>
                    <li class="nav-item customer-service-menu @(ViewContext.RouteData.Values["controller"].ToString() == "CustomerService" ? "expanded active" : "")">
                        <a href="#" class="nav-link">
                            <i class="fas fa-box-open"></i>
                            <span>Quản lý dịch vụ</span>
                        </a>
                        <ul class="sub-menu">
                            <li class="nav-item @(ViewContext.RouteData.Values["controller"].ToString() == "CustomerService" && ViewContext.RouteData.Values["action"].ToString() == "Index" ? "active" : "")">
                                <a href="/CustomerService/Index" class="nav-link">
                                    <i class="fas fa-shopping-cart"></i>
                                    <span>Mua dịch vụ</span>
                                </a>
                            </li>
                            <li class="nav-item @(ViewContext.RouteData.Values["controller"].ToString() == "CustomerService" && ViewContext.RouteData.Values["action"].ToString() == "UserPackages" ? "active" : "")">
                                <a href="/CustomerService/UserPackages" class="nav-link">
                                    <i class="fas fa-box"></i>
                                    <span>Dịch vụ của tôi</span>
                                </a>
                            </li>
                            <li class="nav-item @(ViewContext.RouteData.Values["controller"].ToString() == "CustomerService" && ViewContext.RouteData.Values["action"].ToString() == "Buy" ? "active" : "")">
                                <a href="/CustomerService" class="nav-link">
                                    <i class="fas fa-credit-card"></i>
                                    <span>Thanh toán</span>
                                </a>
                            </li>
                        </ul>
                    </li>
                    <li class="nav-item @(ViewContext.RouteData.Values["controller"].ToString() == "Employer" && ViewContext.RouteData.Values["action"].ToString() == "Profile" ? "active" : "")">
                        <a href="/Employer/Profile" class="nav-link">
                            <i class="fas fa-gear"></i>
                            <span>Cài đặt tài khoản</span>
                        </a>
                    </li>
                    <li class="nav-item @(ViewContext.RouteData.Values["controller"].ToString() == "Employer" && ViewContext.RouteData.Values["action"].ToString() == "History" ? "active" : "")">
                        <a href="/Employer/History" class="nav-link">
                            <i class="fas fa-clock-rotate-left"></i>
                            <span>Lịch sử giao dịch</span>
                        </a>
                    </li>
                </ul>
            </nav>

            <div class="sidebar-footer">
                <div class="user-info">
                    <img src="/images/avatars/default.png" alt="User Avatar" class="user-avatar" />
                    <div class="user-details">
                        <span class="user-name">@User.Identity?.Name</span>
                        <span class="user-role">Nhà tuyển dụng</span>
                    </div>
                </div>
            </div>
        </aside>

        <main class="main-wrapper">
            <div class="top-bar">
                <div class="balance-display">
                    <span class="balance-amount" id="balance-display">
                        @{
                            var userId = Context.Session.GetInt32("UserId");
                            var credit = HttpContextAccessor.HttpContext.Session.GetInt32("credit");
                            if (userId != null)
                            {
                                var balance = credit ?? 0;
                                var formattedBalance = ((decimal)balance).ToString("N0", new System.Globalization.CultureInfo("vi-VN"));
                                @formattedBalance
                            }
                            else
                            {
                                @:0
                            } 
                        } CD
                    </span>
                    <a href="/Credit/Deposit" class="btn-deposit">
                        <i class="fas fa-plus"></i> Nạp tiền
                    </a>
                </div>

                <div class="user-dropdown dropdown">
                    <button class="btn dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        <i class="fas fa-user"></i>
                        @User.Identity?.Name
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="/Employer/Profile"><i class="fas fa-user"></i> Hồ sơ</a></li>
                        <li><a class="dropdown-item" href="/Employer/EditProfile"><i class="fas fa-edit"></i> Chỉnh sửa thông tin</a></li>
                        <li><a class="dropdown-item" href="/Employer/ChangePassword"><i class="fas fa-key"></i> Đổi mật khẩu</a></li>
                        <li><a class="dropdown-item" href="/CustomerService/UserPackages"><i class="fas fa-box"></i> Dịch vụ của tôi</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="/Login/Logout"><i class="fas fa-sign-out-alt"></i> Đăng xuất</a></li>
                    </ul>
                </div>
            </div>

            @if (TempData["Success"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle me-2"></i> @TempData["Success"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle me-2"></i> @TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-circle me-2"></i> @TempData["Error"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-circle me-2"></i> @TempData["ErrorMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            @if (TempData["Warning"] != null)
            {
                <div class="alert alert-warning alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i> @TempData["Warning"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            @if (TempData["Info"] != null)
            {
                <div class="alert alert-info alert-dismissible fade show" role="alert">
                    <i class="fas fa-info-circle me-2"></i> @TempData["Info"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            @RenderBody()
        </main>
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="~/js/employer.js" asp-append-version="true"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Toggle submenu
            const menuItems = document.querySelectorAll('.sidebar-nav .nav-item');

            menuItems.forEach(item => {
                const link = item.querySelector('.nav-link');
                const subMenu = item.querySelector('.sub-menu');

                if (subMenu) {
                    link.addEventListener('click', function (e) {
                        e.preventDefault();
                        
                        // Close other expanded menus
                        menuItems.forEach(otherItem => {
                            if (otherItem !== item && otherItem.classList.contains('expanded')) {
                                otherItem.classList.remove('expanded');
                                const otherSubMenu = otherItem.querySelector('.sub-menu');
                                if (otherSubMenu) {
                                    otherSubMenu.style.maxHeight = '0';
                                }
                            }
                        });

                        // Toggle current menu
                        item.classList.toggle('expanded');
                        const isExpanded = item.classList.contains('expanded');

                        if (isExpanded) {
                            subMenu.style.maxHeight = subMenu.scrollHeight + 'px';
                        } else {
                            subMenu.style.maxHeight = '0';
                        }
                    });

                    // Auto expand if a child is active or if parent is active
                    if (item.querySelector('.sub-menu .active') || item.classList.contains('active')) {
                        item.classList.add('expanded');
                        subMenu.style.maxHeight = subMenu.scrollHeight + 'px';
                    }
                }
            });

            // Mobile sidebar toggle
            const sidebarToggle = document.querySelector('.sidebar-toggle');
            if (sidebarToggle) {
                sidebarToggle.addEventListener('click', function () {
                    document.querySelector('.employer-dashboard').classList.toggle('sidebar-collapsed');
                });
            }

            // Auto-dismiss alerts after 5 seconds
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                setTimeout(() => {
                    if (alert && alert.parentNode) {
                        alert.classList.remove('show');
                        setTimeout(() => {
                            if (alert.parentNode) {
                                alert.parentNode.removeChild(alert);
                            }
                        }, 150);
                    }
                }, 5000);
            });

            // Real-time balance update function
            function updateBalance() {
                const balanceElement = document.getElementById('balance-display');
                if (!balanceElement) return;

                // Add updating class for visual feedback
                balanceElement.classList.add('updating');

                fetch('/CustomerService/GetCurrentBalance')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            balanceElement.textContent = data.formattedBalance + ' CD';
                        }
                    })
                    .catch(error => {
                        console.error('Error updating balance:', error);
                    })
                    .finally(() => {
                        // Remove updating class
                        balanceElement.classList.remove('updating');
                    });
            }

            // Update balance every 10 seconds
            setInterval(updateBalance, 10000);

            // Update balance immediately after purchase (detect if coming from CustomerService)
            if (window.location.pathname.includes('/CustomerService/') || 
                document.referrer.includes('/CustomerService/Buy') ||
                document.referrer.includes('/CustomerService/purchase')) {
                setTimeout(updateBalance, 1000); // Update after 1 second
            }

            // Listen for custom balance update events
            window.addEventListener('balanceUpdated', function() {
                updateBalance();
            });

            // Update balance when page gains focus (user returns from payment)
            window.addEventListener('focus', function () {
                if (document.referrer.includes('/Credit/') || 
                    document.referrer.includes('/CustomerService/')) {
                    setTimeout(updateBalance, 500);
                }
            });
        });

        function updateViewMode(mode) {
            const url = new URL(window.location.href);
            url.searchParams.set('viewMode', mode);
            window.location.href = url.toString();
        }

        // Global function to trigger balance update
        function triggerBalanceUpdate() {
            window.dispatchEvent(new CustomEvent('balanceUpdated'));
        }

        // Customer Service specific functionality
        if (window.location.pathname.includes('/CustomerService/')) {
            console.log('Customer Service page loaded');
            
            // Update balance when leaving CustomerService pages
            window.addEventListener('beforeunload', function() {
                // Trigger balance update for next page load
                sessionStorage.setItem('shouldUpdateBalance', 'true');
            });
        }

        // Check if we should update balance on page load
        if (sessionStorage.getItem('shouldUpdateBalance') === 'true') {
            sessionStorage.removeItem('shouldUpdateBalance');
            setTimeout(() => {
                const event = new CustomEvent('balanceUpdated');
                window.dispatchEvent(event);
            }, 500);
        }
    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
