@model BusinessObjects.DTOs.JobPost.JobPostUpdateDto

@{
    ViewData["Title"] = "Chỉnh sửa bài đăng";
    Layout = "~/Views/Shared/_JobPostManagementLayout.cshtml";
}

<link rel="stylesheet" href="~/css/customer-services.css" />

<style>
    .readonly-field {
        background-color: #f8f9fa;
        border-color: #e9ecef;
    }

    .image-upload-grid {
        display: grid;
        grid-template-columns: 2fr 1fr 1fr 1fr;
        gap: 1rem;
        margin-top: 1rem;
    }

    .image-upload-item {
        border: 2px dashed #e2e8f0;
        border-radius: 8px;
        padding: 1rem;
        text-align: center;
        transition: all 0.3s ease;
    }

        .image-upload-item:hover {
            border-color: #0ea5e9;
            background-color: #f8fafc;
        }

        .image-upload-item.main {
            grid-column: 1;
        }

    .image-upload-label {
        display: block;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: #374151;
    }

    .image-upload-input {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #d1d5db;
        border-radius: 6px;
        font-size: 0.875rem;
    }

    .image-upload-hint {
        font-size: 0.75rem;
        color: #6b7280;
        margin-top: 0.25rem;
    }

    .current-image {
        margin-bottom: 1rem;
        text-align: center;
    }

        .current-image img {
            max-height: 150px;
            border-radius: 8px;
            border: 1px solid #e2e8f0;
        }

    .current-images-grid {
        display: grid;
        grid-template-columns: 2fr 1fr 1fr 1fr;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .current-image-item {
        text-align: center;
    }

        .current-image-item img {
            width: 100%;
            height: 120px;
            object-fit: cover;
            border-radius: 8px;
            border: 1px solid #e2e8f0;
        }

        .current-image-item.main img {
            height: 180px;
        }

    .image-label {
        font-size: 0.875rem;
        font-weight: 600;
        color: #374151;
        margin-bottom: 0.5rem;
    }

    .no-image {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 120px;
        background-color: #f9fafb;
        border: 2px dashed #d1d5db;
        border-radius: 8px;
        color: #6b7280;
        font-size: 0.875rem;
    }

        .no-image.main {
            height: 180px;
        }

    .category-selector {
        border: 1px solid #d1d5db;
        border-radius: 6px;
        padding: 1rem;
        background-color: #f9fafb;
    }

    .category-tree {
        max-height: 300px;
        overflow-y: auto;
    }

    .category-item {
        margin-bottom: 0.5rem;
    }

    .category-parent {
        font-weight: 600;
        color: #374151;
        margin-bottom: 0.25rem;
    }

    .category-children {
        margin-left: 1.5rem;
    }

    .category-child {
        margin-bottom: 0.25rem;
    }

    .category-checkbox {
        margin-right: 0.5rem;
    }
</style>

<div class="form-container">
    <div class="form-header">
        <h2><i class="fas fa-edit"></i> @ViewData["Title"]</h2>
    </div>

    <form asp-action="Edit" method="post" enctype="multipart/form-data">
        @Html.AntiForgeryToken()
        <input type="hidden" asp-for="Id" />
        <input type="hidden" asp-for="PostType" />
        <input type="hidden" asp-for="ImageMain" />
        <input type="hidden" asp-for="Image2" />
        <input type="hidden" asp-for="Image3" />
        <input type="hidden" asp-for="Image4" />

        @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
        {
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-triangle"></i> @ViewBag.ErrorMessage
            </div>
        }
        @if (!ViewData.ModelState.IsValid)
        {
            <div class="error-summary">
                <h6><i class="fas fa-exclamation-circle"></i> Vui lòng sửa các lỗi sau:</h6>
                <div asp-validation-summary="All" class="text-danger"></div>
            </div>
        }

        <div class="form-section">
            <div class="form-section-title">
                <i class="fas fa-info-circle"></i> Thông tin cơ bản
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label asp-for="Title" class="form-label">
                        <i class="fas fa-heading"></i> Tiêu đề
                    </label>
                    <input asp-for="Title" class="form-control" />
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>
            </div>



            <div class="form-row">
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-map-marker-alt"></i> Địa điểm
                    </label>
                    <div class="row">
                        <div class="col-md-4">
                            <select id="provinceSelect" class="form-control" required>
                                <option value="">-- Chọn Tỉnh/Thành phố --</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <select id="districtSelect" class="form-control" required disabled>
                                <option value="">-- Chọn Quận/Huyện --</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <select id="wardSelect" class="form-control" required disabled>
                                <option value="">-- Chọn Phường/Xã --</option>
                            </select>
                        </div>
                    </div>
                    <input type="hidden" id="selectedProvinceName" name="selectedProvinceName" />
                    <input type="hidden" id="selectedDistrictName" name="selectedDistrictName" />
                    <input type="hidden" id="selectedWardName" name="selectedWardName" />
                    <span asp-validation-for="Location" class="text-danger"></span>
                    <small class="form-text text-muted">Chọn địa điểm làm việc</small>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label asp-for="SpecificAddress" class="form-label">
                        <i class="fas fa-map-pin"></i> Địa chỉ cụ thể (Số nhà, tên đường)
                    </label>
                    <input asp-for="SpecificAddress" class="form-control" placeholder="Ví dụ: 48 Bùi Thị Xuân" maxlength="255" />
                    <span asp-validation-for="SpecificAddress" class="text-danger"></span>
                    <small class="form-text text-muted">Địa chỉ chi tiết (tùy chọn)</small>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-tags"></i> Danh mục công việc
                    </label>
                    <div class="category-selector">
                        <div id="categoryTree" class="category-tree">
                            <!-- Categories will be loaded here via JavaScript -->
                        </div>
                    </div>
                    <small class="form-text text-muted">Chọn một hoặc nhiều danh mục phù hợp với công việc</small>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label asp-for="JobType" class="form-label">
                        <i class="fas fa-briefcase"></i> Hình thức làm việc
                    </label>
                    <select asp-for="JobType" class="form-control">
                        <option value="">-- Chọn hình thức làm việc --</option>
                        <option value="Toàn thời gian">Toàn thời gian</option>
                        <option value="Bán thời gian">Bán thời gian</option>
                        <option value="Thực tập">Thực tập</option>
                        <option value="Freelance">Freelance</option>
                    </select>
                    <span asp-validation-for="JobType" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="ExperienceLevel" class="form-label">
                        <i class="fas fa-star"></i> Kinh nghiệm
                    </label>
                    <select asp-for="ExperienceLevel" class="form-control">
                        <option value="">-- Chọn mức kinh nghiệm --</option>
                        <option value="Không cần kinh nghiệm">Không cần kinh nghiệm</option>
                        <option value="Ít nhất 3 tháng kinh nghiệm">Ít nhất 3 tháng kinh nghiệm</option>
                        <option value="Ít nhất 6 tháng kinh nghiệm">Ít nhất 6 tháng kinh nghiệm</option>
                        <option value="Trên 1 năm kinh nghiệm">Trên 1 năm kinh nghiệm</option>
                    </select>
                    <span asp-validation-for="ExperienceLevel" class="text-danger"></span>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label asp-for="SalaryMin" class="form-label">
                        <i class="fas fa-money-bill-wave"></i> Lương tối thiểu (VNĐ)
                    </label>
                    <input asp-for="SalaryMin" class="form-control" type="number" min="0" />
                    <span asp-validation-for="SalaryMin" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="SalaryMax" class="form-label">
                        <i class="fas fa-money-bill-wave"></i> Lương tối đa (VNĐ)
                    </label>
                    <input asp-for="SalaryMax" class="form-control" type="number" min="0" />
                    <span asp-validation-for="SalaryMax" class="text-danger"></span>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label asp-for="Deadline" class="form-label">
                        <i class="fas fa-calendar-alt"></i> Hạn nộp hồ sơ
                    </label>
                    <input asp-for="Deadline" class="form-control" type="date" />
                    <span asp-validation-for="Deadline" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-tag"></i> Loại bài đăng
                    </label>
                    <input class="form-control readonly-field" value="@Model.PostType" readonly />
                    <small class="form-text text-muted">Loại bài đăng không thể thay đổi sau khi tạo</small>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label asp-for="Status" class="form-label">
                        <i class="fas fa-toggle-on"></i> Trạng thái
                    </label>
                    <select asp-for="Status" class="form-control">
                        <option value="active">Hoạt động</option>
                        <option value="inactive">Ẩn</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="form-section">
            <div class="form-section-title">
                <i class="fas fa-images"></i> Hình ảnh
            </div>

            <!-- Current Images Display -->
            <div class="current-images-grid">
                <div class="current-image-item main">
                    <div class="image-label">Ảnh chính hiện tại</div>
                    @if (!string.IsNullOrEmpty(Model.ImageMain))
                    {
                        <img src="@Model.ImageMain" alt="Ảnh chính" />
                    }
                    else
                    {
                        <div class="no-image main">Chưa có ảnh</div>
                    }
                </div>

                <div class="current-image-item">
                    <div class="image-label">Ảnh 2 hiện tại</div>
                    @if (!string.IsNullOrEmpty(Model.Image2))
                    {
                        <img src="@Model.Image2" alt="Ảnh 2" />
                    }
                    else
                    {
                        <div class="no-image">Chưa có ảnh</div>
                    }
                </div>

                <div class="current-image-item">
                    <div class="image-label">Ảnh 3 hiện tại</div>
                    @if (!string.IsNullOrEmpty(Model.Image3))
                    {
                        <img src="@Model.Image3" alt="Ảnh 3" />
                    }
                    else
                    {
                        <div class="no-image">Chưa có ảnh</div>
                    }
                </div>

                <div class="current-image-item">
                    <div class="image-label">Ảnh 4 hiện tại</div>
                    @if (!string.IsNullOrEmpty(Model.Image4))
                    {
                        <img src="@Model.Image4" alt="Ảnh 4" />
                    }
                    else
                    {
                        <div class="no-image">Chưa có ảnh</div>
                    }
                </div>
            </div>

            <!-- Upload New Images -->
            <div class="image-upload-grid">
                <div class="image-upload-item main">
                    <label for="ImageMainFile" class="image-upload-label">
                        <i class="fas fa-image"></i> Thay đổi ảnh chính
                    </label>
                    <input type="file" class="image-upload-input" id="ImageMainFile" name="ImageMainFile" accept="image/*" />
                    <div class="image-upload-hint">Để trống nếu không muốn thay đổi</div>
                </div>

                <div class="image-upload-item">
                    <label for="Image2File" class="image-upload-label">
                        <i class="fas fa-image"></i> Thay đổi ảnh 2
                    </label>
                    <input type="file" class="image-upload-input" id="Image2File" name="Image2File" accept="image/*" />
                    <div class="image-upload-hint">Để trống nếu không muốn thay đổi</div>
                </div>

                <div class="image-upload-item">
                    <label for="Image3File" class="image-upload-label">
                        <i class="fas fa-image"></i> Thay đổi ảnh 3
                    </label>
                    <input type="file" class="image-upload-input" id="Image3File" name="Image3File" accept="image/*" />
                    <div class="image-upload-hint">Để trống nếu không muốn thay đổi</div>
                </div>

                <div class="image-upload-item">
                    <label for="Image4File" class="image-upload-label">
                        <i class="fas fa-image"></i> Thay đổi ảnh 4
                    </label>
                    <input type="file" class="image-upload-input" id="Image4File" name="Image4File" accept="image/*" />
                    <div class="image-upload-hint">Để trống nếu không muốn thay đổi</div>
                </div>
            </div>

            <small class="form-text text-muted mt-2">
                <i class="fas fa-info-circle"></i>
                Chấp nhận file: JPG, PNG, GIF. Kích thước tối đa: 5MB mỗi ảnh.
            </small>
        </div>

        <div class="form-section">
            <div class="form-section-title">
                <i class="fas fa-file-alt"></i> Nội dung chi tiết
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label asp-for="Description" class="form-label">
                        <i class="fas fa-align-left"></i> Mô tả công việc
                    </label>
                    <textarea asp-for="Description" class="form-control" rows="4"></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label asp-for="Requirements" class="form-label">
                        <i class="fas fa-list-check"></i> Yêu cầu ứng viên
                    </label>
                    <textarea asp-for="Requirements" class="form-control" rows="4"></textarea>
                    <span asp-validation-for="Requirements" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="Benefits" class="form-label">
                        <i class="fas fa-gift"></i> Phúc lợi
                    </label>
                    <textarea asp-for="Benefits" class="form-control" rows="4"></textarea>
                    <span asp-validation-for="Benefits" class="text-danger"></span>
                </div>
            </div>
        </div>

        <!-- Hidden field for category IDs -->
        <input type="hidden" id="selectedCategoryIds" name="selectedCategoryIds" />

        <div class="form-actions">
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-save"></i> Lưu thay đổi
            </button>
            <a href="@Url.Action("Index", "JobPostManagement")" class="btn btn-secondary">
                <i class="fas fa-times"></i> Hủy
            </a>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        let selectedCategories = [];
        const currentCategoryIds = '@ViewBag.CurrentCategoryIds';
        const currentLocation = '@ViewBag.CurrentLocation'; // Get original full location string
        const currentSpecificAddress = '@ViewBag.CurrentSpecificAddress'; // Get parsed specific address

        document.addEventListener('DOMContentLoaded', () => {
            // Parse current category IDs
            if (currentCategoryIds) {
                selectedCategories = currentCategoryIds.split(',').map(id => parseInt(id.trim())).filter(id => !isNaN(id));
            }

            // Load job categories
            loadJobCategories();

            // Location dropdowns
            const provinceSelect = document.getElementById('provinceSelect');
            const districtSelect = document.getElementById('districtSelect');
            const wardSelect = document.getElementById('wardSelect');
            const selectedProvinceNameInput = document.getElementById('selectedProvinceName');
            const selectedDistrictNameInput = document.getElementById('selectedDistrictName');
            const selectedWardNameInput = document.getElementById('selectedWardName');

            // Pre-fill specific address input
            const specificAddressInput = document.getElementById('SpecificAddress');
            if (specificAddressInput && currentSpecificAddress) {
                specificAddressInput.value = currentSpecificAddress;
            }

            // Load provinces on page load and pre-select if location exists
            loadProvinces(currentLocation); // Pass the original full location string for dropdown pre-selection

            provinceSelect.addEventListener('change', async () => { // Made async
                const selectedProvinceCode = provinceSelect.value;
                selectedProvinceNameInput.value = provinceSelect.options[provinceSelect.selectedIndex].text;
                if (selectedProvinceCode) {
                    await loadDistricts(selectedProvinceCode); // Await the call
                    districtSelect.disabled = false;
                    wardSelect.disabled = true;
                    wardSelect.innerHTML = '<option value="">-- Chọn Phường/Xã --</option>';
                    selectedDistrictNameInput.value = '';
                    selectedWardNameInput.value = '';
                } else {
                    districtSelect.disabled = true;
                    wardSelect.disabled = true;
                    districtSelect.innerHTML = '<option value="">-- Chọn Quận/Huyện --</option>';
                    wardSelect.innerHTML = '<option value="">-- Chọn Phường/Xã --</option>';
                    selectedProvinceNameInput.value = '';
                    selectedDistrictNameInput.value = '';
                    selectedWardNameInput.value = '';
                }
            });

            districtSelect.addEventListener('change', async () => { // Made async
                const selectedDistrictCode = districtSelect.value;
                selectedDistrictNameInput.value = districtSelect.options[districtSelect.selectedIndex].text;
                if (selectedDistrictCode) {
                    await loadWards(selectedDistrictCode); // Await the call
                    wardSelect.disabled = false;
                    selectedWardNameInput.value = '';
                } else {
                    wardSelect.disabled = true;
                    wardSelect.innerHTML = '<option value="">-- Chọn Phường/Xã --</option>';
                    selectedDistrictNameInput.value = '';
                    selectedWardNameInput.value = '';
                }
            });

            wardSelect.addEventListener('change', () => {
                selectedWardNameInput.value = wardSelect.options[wardSelect.selectedIndex].text;
            });

            // Form submission handler
            document.querySelector('form').addEventListener('submit', function (e) {
                // Update hidden field with selected categories
                document.getElementById('selectedCategoryIds').value = selectedCategories.join(',');
            });
        });

        async function loadProvinces(currentLocation = '') {
            try {
                const response = await fetch('https://localhost:7009/api/LocationApi/provinces');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const result = await response.json();
                if (result.success) {
                    const provinces = result.data;
                    const provinceSelect = document.getElementById('provinceSelect');
                    provinceSelect.innerHTML = '<option value="">-- Chọn Tỉnh/Thành phố --</option>'; // Clear previous options
                    provinces.forEach(province => {
                        const option = document.createElement('option');
                        option.value = province.code;
                        option.textContent = province.name;
                        provinceSelect.appendChild(option);
                    });

                    // Attempt to pre-select province if currentLocation is available
                    if (currentLocation) {
                        const parts = currentLocation.split(', ').map(p => p.trim());
                        // The location string is typically "Specific Address, Ward, District, Province"
                        // We need to find the province name which is the last part
                        const provinceName = parts[parts.length - 1];
                        const preSelectedProvince = provinces.find(p => p.name === provinceName);
                        if (preSelectedProvince) {
                            provinceSelect.value = preSelectedProvince.code;
                            document.getElementById('selectedProvinceName').value = preSelectedProvince.name;
                            // Await the loading of districts before proceeding
                            await loadDistricts(preSelectedProvince.code, currentLocation);
                            document.getElementById('districtSelect').disabled = false;
                        }
                    }
                } else {
                    console.error('Failed to load provinces:', result.message);
                }
            } catch (error) {
                console.error('Error fetching provinces:', error);
                alert('Không thể tải danh sách Tỉnh/Thành phố. Vui lòng thử lại sau.');
            }
        }

        async function loadDistricts(provinceCode, currentLocation = '') {
            try {
                const response = await fetch(`https://localhost:7009/api/LocationApi/districts/${provinceCode}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const result = await response.json();
                const districtSelect = document.getElementById('districtSelect');
                districtSelect.innerHTML = '<option value="">-- Chọn Quận/Huyện --</option>'; // Clear previous options
                if (result.success) {
                    const districts = result.data;
                    districts.forEach(district => {
                        const option = document.createElement('option');
                        option.value = district.code;
                        option.textContent = district.name;
                        districtSelect.appendChild(option);
                    });

                    // Attempt to pre-select district if currentLocation is available
                    if (currentLocation) {
                        const parts = currentLocation.split(', ').map(p => p.trim());
                        // District name is the second to last part if Ward, District, Province are present
                        if (parts.length >= 2) {
                            const districtName = parts[parts.length - 2];
                            const preSelectedDistrict = districts.find(d => d.name === districtName);
                            if (preSelectedDistrict) {
                                districtSelect.value = preSelectedDistrict.code;
                                document.getElementById('selectedDistrictName').value = preSelectedDistrict.name;
                                // Await the loading of wards before proceeding
                                await loadWards(preSelectedDistrict.code, currentLocation);
                                document.getElementById('wardSelect').disabled = false;
                            }
                        }
                    }
                } else {
                    console.error('Failed to load districts:', result.message);
                }
            } catch (error) {
                console.error('Error fetching districts:', error);
                alert('Không thể tải danh sách Quận/Huyện. Vui lòng thử lại sau.');
            }
        }

        async function loadWards(districtCode, currentLocation = '') {
            try {
                const response = await fetch(`https://localhost:7009/api/LocationApi/wards/${districtCode}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const result = await response.json();
                const wardSelect = document.getElementById('wardSelect');
                wardSelect.innerHTML = '<option value="">-- Chọn Phường/Xã --</option>'; // Clear previous options
                if (result.success) {
                    const wards = result.data;
                    wards.forEach(ward => {
                        const option = document.createElement('option');
                        option.value = ward.code;
                        option.textContent = ward.name;
                        wardSelect.appendChild(option);
                    });

                    // Attempt to pre-select ward if currentLocation is available
                    if (currentLocation) {
                        const parts = currentLocation.split(', ').map(p => p.trim());
                        // Ward name is the third to last part if Ward, District, Province are present
                        if (parts.length >= 3) {
                            const wardName = parts[parts.length - 3];
                            const preSelectedWard = wards.find(w => w.name === wardName);
                            if (preSelectedWard) {
                                wardSelect.value = preSelectedWard.code;
                                document.getElementById('selectedWardName').value = preSelectedWard.name;
                            }
                        }
                    }
                } else {
                    console.error('Failed to load wards:', result.message);
                }
            } catch (error) {
                console.error('Error fetching wards:', error);
                alert('Không thể tải danh sách Phường/Xã. Vui lòng thử lại sau.');
            }
        }

        function loadJobCategories() {
            fetch('/JobPostManagement/GetJobCategories')
                .then(response => response.json())
                .then(categories => {
                    renderCategoryTree(categories);
                })
                .catch(error => {
                    console.error('Error loading categories:', error);
                    document.getElementById('categoryTree').innerHTML = '<p class="text-danger">Không thể tải danh mục. Vui lòng thử lại.</p>';
                });
        }

        function renderCategoryTree(categories) {
            const container = document.getElementById('categoryTree');
            container.innerHTML = '';

            categories.forEach(category => {
                const categoryDiv = document.createElement('div');
                categoryDiv.className = 'category-item';

                // Parent category
                const parentDiv = document.createElement('div');
                parentDiv.className = 'category-parent';

                const parentCheckbox = document.createElement('input');
                parentCheckbox.type = 'checkbox';
                parentCheckbox.className = 'category-checkbox';
                parentCheckbox.id = `category-${category.id}`;
                parentCheckbox.value = category.id;
                parentCheckbox.checked = selectedCategories.includes(category.id); // Pre-check
                parentCheckbox.addEventListener('change', function () {
                    handleCategorySelection(this);
                });

                const parentLabel = document.createElement('label');
                parentLabel.htmlFor = `category-${category.id}`;
                parentLabel.textContent = category.name;

                parentDiv.appendChild(parentCheckbox);
                parentDiv.appendChild(parentLabel);
                categoryDiv.appendChild(parentDiv);

                // Children categories
                if (category.children && category.children.length > 0) {
                    const childrenDiv = document.createElement('div');
                    childrenDiv.className = 'category-children';

                    category.children.forEach(child => {
                        const childDiv = document.createElement('div');
                        childDiv.className = 'category-child';

                        const childCheckbox = document.createElement('input');
                        childCheckbox.type = 'checkbox';
                        childCheckbox.className = 'category-checkbox';
                        childCheckbox.id = `category-${child.id}`;
                        childCheckbox.value = child.id;
                        childCheckbox.checked = selectedCategories.includes(child.id); // Pre-check
                        childCheckbox.addEventListener('change', function () {
                            handleCategorySelection(this);
                        });

                        const childLabel = document.createElement('label');
                        childLabel.htmlFor = `category-${child.id}`;
                        childLabel.textContent = child.name;

                        childDiv.appendChild(childCheckbox);
                        childDiv.appendChild(childLabel);
                        childrenDiv.appendChild(childDiv);
                    });

                    categoryDiv.appendChild(childrenDiv);
                }

                container.appendChild(categoryDiv);
            });
        }

        function handleCategorySelection(checkbox) {
            const categoryId = parseInt(checkbox.value);

            if (checkbox.checked) {
                if (!selectedCategories.includes(categoryId)) {
                    selectedCategories.push(categoryId);
                }
            } else {
                selectedCategories = selectedCategories.filter(id => id !== categoryId);
            }
        }

        function validateImageFile(input, errorDiv) {
            const file = input.files[0];

            // Clear previous errors
            errorDiv.style.display = 'none';
            errorDiv.textContent = '';
            input.classList.remove('is-invalid');

            if (file) {
                let hasError = false;
                let errorMessage = '';

                // Check file size (5MB = 5 * 1024 * 1024 bytes)
                if (file.size > 5 * 1024 * 1024) {
                    hasError = true;
                    errorMessage = 'Kích thước file không được vượt quá 5MB';
                }

                // Check file type
                const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
                if (!hasError && !allowedTypes.includes(file.type)) {
                    hasError = true;
                    errorMessage = 'Chỉ chấp nhận file ảnh: JPG, PNG, hoặc GIF';
                }

                if (hasError) {
                    errorDiv.textContent = errorMessage;
                    errorDiv.style.display = 'block';
                    input.classList.add('is-invalid');
                    input.value = '';
                    return;
                }
            }
        }

        function updatePostTypeDescriptions(silverCredits, goldCredits, diamondCredits) {
            const silverOption = document.querySelector('.post-type-option.silver');
            const goldOption = document.querySelector('.post-type-option.gold');
            const diamondOption = document.querySelector('.post-type-option.diamond');

            if (silverCredits <= 0) {
                silverOption.classList.add('disabled');
                silverOption.querySelector('.post-type-desc').textContent = 'Hết lượt';
                document.getElementById('silver').disabled = true;
            } else {
                silverOption.querySelector('.post-type-desc').textContent = `Còn ${silverCredits} lượt`;
            }

            if (goldCredits <= 0) {
                goldOption.classList.add('disabled');
                goldOption.querySelector('.post-type-desc').textContent = 'Hết lượt';
                document.getElementById('gold').disabled = true;
            } else {
                goldOption.querySelector('.post-type-desc').textContent = `Còn ${goldCredits} lượt`;
            }

            if (diamondCredits <= 0) {
                diamondOption.classList.add('disabled');
                diamondOption.querySelector('.post-type-desc').textContent = 'Hết lượt';
                document.getElementById('diamond').disabled = true;
            } else {
                diamondOption.querySelector('.post-type-desc').textContent = `Còn ${diamondCredits} lượt`;
            }
        }
    </script>
}
