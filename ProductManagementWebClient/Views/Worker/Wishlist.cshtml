@model List<BusinessObjects.DTOs.Worker.WishlistDto>
@{
    ViewData["Title"] = "My Wishlist";
    Layout = "_WorkerLayout";
}

<div class="bg-blue-50 py-6">
    <div class="container mx-auto px-4">
        <div class="flex flex-wrap items-center text-sm text-gray-600">
            <a asp-controller="Worker" asp-action="Index" class="hover:text-blue-600">Home</a>
            <span class="mx-2">/</span>
            <span class="text-gray-800">My Wishlist</span>
        </div>
    </div>
</div>

<div class="container mx-auto px-4 py-8">
    <!-- Success/Error Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-6" role="alert">
            <span class="block sm:inline">@TempData["SuccessMessage"]</span>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6" role="alert">
            <span class="block sm:inline">@TempData["ErrorMessage"]</span>
        </div>
    }

    <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-bold text-gray-900">
                My Wishlist
                @if (Model.Any())
                {
                    <span class="text-gray-600 font-normal">(@Model.Count items)</span>
                }
            </h1>
        </div>

        @if (Model.Any())
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="wishlist-container">
                @foreach (var wishlistItem in Model)
                {
                    <div class="wishlist-item border border-gray-200 rounded-lg overflow-hidden hover:shadow-lg transition duration-300" data-job-id="@wishlistItem.JobPostId">
                        <div class="p-6">
                            <div class="flex justify-between items-start mb-3">
                                <h3 class="font-semibold text-lg text-gray-900">
                                    <a asp-controller="Worker" asp-action="JobDetails" asp-route-id="@wishlistItem.JobPostId" class="hover:text-blue-600">
                                        @wishlistItem.JobPost.Title
                                    </a>
                                </h3>
                                <span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">
                                    @wishlistItem.JobPost.PostType
                                </span>
                            </div>

                            <div class="flex items-center text-gray-500 text-sm mb-3">
                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                </svg>
                                <span>@wishlistItem.JobPost.Location</span>
                            </div>

                            <div class="flex flex-wrap gap-2 mb-4">
                                <span class="bg-gray-100 text-gray-800 text-xs px-2 py-1 rounded">
                                    @wishlistItem.JobPost.JobType
                                </span>
                                @if (wishlistItem.JobPost.SalaryMin.HasValue && wishlistItem.JobPost.SalaryMax.HasValue)
                                {
                                    <span class="bg-gray-100 text-gray-800 text-xs px-2 py-1 rounded">
                                        $@wishlistItem.JobPost.SalaryMin.Value.ToString("#,##0") - $@wishlistItem.JobPost.SalaryMax.Value.ToString("#,##0")
                                    </span>
                                }
                                else if (wishlistItem.JobPost.SalaryMin.HasValue)
                                {
                                    <span class="bg-gray-100 text-gray-800 text-xs px-2 py-1 rounded">
                                        From $@wishlistItem.JobPost.SalaryMin.Value.ToString("#,##0")
                                    </span>
                                }
                                else if (wishlistItem.JobPost.SalaryMax.HasValue)
                                {
                                    <span class="bg-gray-100 text-gray-800 text-xs px-2 py-1 rounded">
                                        Up to $@wishlistItem.JobPost.SalaryMax.Value.ToString("#,##0")
                                    </span>
                                }
                            </div>

                            <div class="text-sm text-gray-500 mb-4">
                                <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.682l-1.318-1.364a4.5 4.5 0 00-6.364 0z"></path>
                                </svg>
                                Added @wishlistItem.CreatedAt.Value.ToString("MMM dd, yyyy")
                            </div>

                            <div class="flex justify-between items-center">
                                <a asp-controller="Worker" asp-action="JobDetails" asp-route-id="@wishlistItem.JobPostId" class="text-blue-600 hover:text-blue-800 font-medium">
                                    View Details →
                                </a>

                                <button type="button" class="remove-wishlist-btn text-red-500 hover:text-red-700 flex items-center" data-job-id="@wishlistItem.JobPostId">
                                    <svg class="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clip-rule="evenodd"></path>
                                    </svg>
                                    Remove
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-12">
                <svg class="w-16 h-16 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.682l-1.318-1.364a4.5 4.5 0 00-6.364 0z"></path>
                </svg>
                <h3 class="text-lg font-medium text-gray-900 mb-1">Your wishlist is empty</h3>
                <p class="text-gray-600 mb-4">Start adding jobs to your wishlist to keep track of opportunities you're interested in</p>
                <a asp-controller="Worker" asp-action="Index" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-md inline-block">
                    Browse Jobs
                </a>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        // Remove from wishlist functionality
        document.querySelectorAll('.remove-wishlist-btn').forEach(button => {
            button.addEventListener('click', function () {
                const jobId = this.getAttribute('data-job-id');
                const wishlistItem = this.closest('.wishlist-item');

                if (confirm('Are you sure you want to remove this job from your wishlist?')) {
                    fetch('/Worker/RemoveFromWishlist', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                        },
                        body: JSON.stringify(parseInt(jobId))
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Animate removal
                                wishlistItem.style.transition = 'all 0.3s ease';
                                wishlistItem.style.opacity = '0';
                                wishlistItem.style.transform = 'scale(0.95)';

                                setTimeout(() => {
                                    wishlistItem.remove();

                                    // Check if wishlist is empty
                                    const remainingItems = document.querySelectorAll('.wishlist-item');
                                    if (remainingItems.length === 0) {
                                        location.reload(); // Reload to show empty state
                                    }
                                }, 300);

                                // Show success message
                                const message = document.createElement('div');
                                message.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-md shadow-lg z-50';
                                message.textContent = data.message;
                                document.body.appendChild(message);

                                setTimeout(() => {
                                    message.remove();
                                }, 3000);

                                // Update wishlist badge if exists
                                const wishlistBadge = document.getElementById('wishlist-badge');
                                if (wishlistBadge) {
                                    const currentCount = parseInt(wishlistBadge.textContent) || 0;
                                    const newCount = Math.max(0, currentCount - 1);
                                    wishlistBadge.textContent = newCount;
                                    if (newCount === 0) {
                                        wishlistBadge.style.display = 'none';
                                    }
                                }
                            } else {
                                alert(data.message || 'Error removing item from wishlist');
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('An error occurred while removing the item');
                        });
                }
            });
        });

        // Auto-dismiss messages
        setTimeout(() => {
            const alerts = document.querySelectorAll('[role="alert"]');
            alerts.forEach(alert => {
                alert.style.transition = 'opacity 0.3s ease';
                alert.style.opacity = '0';
                setTimeout(() => alert.remove(), 300);
            });
        }, 5000);
    </script>
}
